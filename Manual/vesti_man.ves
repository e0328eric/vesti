docclass article (10pt)
importpkg {
    geometry (a4paper, margin = 2.2cm),
}

\title{Vesti Transpiler User Manual}
\author{Sungbae Jeong}

importves (font.ves)

startdoc
\maketitle

\section{Introduction}

\section{Language Reference}
\subsection{Basic Grammar}
The purpose of \it{vesti} is an easy usage of latex. Thus the grammar itself is
similar with the latex's one.
However, there are some difference. The very different thing is the existence
of keywords.

\subsection{Keywords}
Followings are reserved as a keyword.
useenv table [ht] {
    \centering 
    #jl:
    # Read file
    content = read("../src/lexer/Token.zig", String)

    # Match .{ "keyword", TokenType.<Identifier> } but EXCLUDE TokenType.deprecated(...)
    # Explanation:
    #   TokenType\.(?!deprecated\b)  -> negative lookahead blocks 'deprecated'
    pattern = r"\.\{\s*\"([^\"]+)\"\s*,\s*TokenType\.(?!deprecated\b)(\w+)"

    # Extract just the keyword names (first capture) and sort
    keywords = sort([m.captures[1] for m in eachmatch(pattern, content)])

    # Emit LaTeX table, 6 columns
    Vesti.print(raw"\begin{tabular}{cccc}", nl=1)
    for (i, keyword) in enumerate(keywords)
        if i % 4 == 0           # 1-based indexing in Julia
            Vesti.print("{\\ttfamily $(keyword)}\\\\", nl=1)
        else
            Vesti.print("{\\ttfamily $(keyword)}&", nl=1)
        end
    end
    Vesti.print(raw"\end{tabular}", nl=1)
    :jl#
}

\subsection{Builtins}
Followings are reserved as a builtin function.
useenv table [ht] {
    \centering 
    #jl:
    # Read file
    content = read("../src/lexer/Token.zig", String)

    # Match strings of the form .{ "something" }
    pattern = r"\.\{\s*\"([^\"]+)\"\s*\}"

    # Extract just the keyword names (first capture) and sort
    builtins = sort([m.captures[1] for m in eachmatch(pattern, content)])

    # Emit LaTeX table, 6 columns
    Vesti.print(raw"\catcode`_=12", nl=1)
    Vesti.print(raw"\begin{tabular}{ccccc}", nl=1)
    for (i, builtin) in enumerate(builtins)
        if i % 5 == 0           # 1-based indexing in Julia
            Vesti.print("{\\ttfamily \\#$(builtin)}\\\\", nl=1)
        else
            Vesti.print("{\\ttfamily \\#$(builtin)}&", nl=1)
        end
    end
    Vesti.print(raw"\end{tabular}", nl=1)
    Vesti.print(raw"\catcode`_=8", nl=1)
    :jl#
}

\subsection{{\ttfamily docclass} keywords}

